---
title: "ADP Analysis"
format: html
editor: visual
---

## ADP analysis of Experiment 3

```{r load dependencies}
#| echo: false
#| message: false
#| warning: false

library(tidyverse)
library(Routliers)
library(lme4)
library(nlme)
library(sjPlot)
library(MuMIn)
library(lmerTest)
library(jtools)
library(gdtools)
library(broom)
library(ggstatsplot)
library(modelsummary)
library(ggpubr)
#library(flextable)
#library(webshot)
#library(officer)
library(effects)
library(effectsize)
library(sjPlot)

```

```{r load data}
#| echo: false
df.experiment_1 <- read.csv(
  "../../data/ADP.csv", 
  header = TRUE, sep = ',',
  stringsAsFactors = TRUE) %>%
  filter(experiment == 3)
  
myViridis <- viridisLite::viridis(alpha=1, n= 3)

df.experiment_1$room_condition = factor(df.experiment_1$room_condition, 
                                      levels=c("No visual info", "Congruent VE"))
```

### ADP Power function analysis

#### LMEM

This section fits a Linear Mixed Effects Model with:

-   Logarithm of perceived distance as dependent variable

-   Logarithm of target distance as fixed effect

-   Room condition as fixed effect

-   Considering subject as random effect for random slope and intercept

##### Model

```{r LMEM}
#| warning: false
m.Dist1 <-  lmer(log10(perc_dist) ~ log10(target_distance)*room_condition+
                   (1+log10(target_distance)|subject)+
                   (0+room_condition|subject),
                 data = df.experiment_1) 

tab_model(m.Dist1, file ="./stats/lmem.html")
```

```{r stats extract}
#| message: false
#| warning: false
#| include: false
mDist1stats <- extract_stats(ggcoefstats(m.Dist1))

```

##### Anova

```{r LMEM ANOVA}
anov1 = anova(m.Dist1)
write.csv(anov1 , file = "./stats/anova.csv")
knitr::kable(anov1, "html")
```

##### Effect size

```{r LMEM effect size}
eta_sqrd = eta_squared(anov1)
write.csv(eta_sqrd, file="./stats/efect_size_partial_eta_sqrd.csv")
#eta_sqrd
knitr::kable(eta_sqrd, "html")
```

##### Individual fits

```{r individual fits}
#| echo: true
#| message: false
#| warning: false
#| fig-height: 30
df.experiment_1$Modelfitted1<-predict(m.Dist1)

FittedlmPlot1 <-ggplot()+
  facet_grid(subject ~ room_condition, labeller=label_both)+
  geom_line(data = df.experiment_1, aes(x = target_distance, y = 10^Modelfitted1, colour = room_condition))+
  geom_point(data = df.experiment_1, aes(x = target_distance, y =perc_dist, group=room_condition,colour = room_condition), size=3)+
  geom_abline(intercept = 0, slope = 1, linetype=2) +
  scale_colour_manual(values = c(myViridis[2], myViridis[1])) +
  scale_fill_manual(values = c(myViridis[2], myViridis[1])) +
  xlab("Targent_distance")+
  ylab("Perceived_distance")+
  theme(legend.position = "none")


figures_folder = "./figures/"
filename = paste(figures_folder, .Platform$file.sep, "inidividual-fits", ".png", sep = '')

#png(filename, res=600, units="cm", width=15, height=100)
#plot(FittedlmPlot1)
#dev.off()
```

```{r show individual fits}
#| fig-height: 40
plot(FittedlmPlot1)
```

##### Model figure

```{r ADP model}
#| message: false
#| warning: false
Final.Fixed<-effect(c("log10(target_distance)*room_condition"), m.Dist1)
Final.Fixed<-as.data.frame(Final.Fixed)

eq1 <- substitute("No Visual Info:" ~~~ italic(y) == k %.% italic(X)^italic(a),
                  list(k = round(10^mDist1stats$tidy_data$estimate[[1]],digits = 2),
                       a = round(mDist1stats$tidy_data$estimate[[2]], digits = 2)))
eq2 <- substitute("Congruent VE :"~~~italic(y) == k %.% italic(X)^italic(a),
                  list(k = round(10^(mDist1stats$tidy_data$estimate[[1]]+mDist1stats$tidy_data$estimate[[3]]), digits = 2),
                       a = round(mDist1stats$tidy_data$estimate[[2]]+mDist1stats$tidy_data$estimate[[4]], digits = 2)))

df.experiment_1 <- df.experiment_1 %>%
  mutate(
    perc_dist_log_10 = log10(perc_dist)
  )

tabla.pob <- df.experiment_1%>% 
  group_by(target_distance,room_condition) %>%
  summarise(Mperc_dist  = mean(perc_dist_log_10),
            SDperc_dist = sd(perc_dist_log_10)/sqrt(n()))  %>%
  ungroup()

f1 <- ggplot(tabla.pob, 
             aes(x=target_distance, 
                 y =10^Mperc_dist, 
                 group = room_condition, 
                 color = room_condition)) +
  geom_pointrange(aes(x = target_distance, 
                      y = 10^Mperc_dist, 
                      ymin = 10^(Mperc_dist-SDperc_dist), 
                      ymax = 10^(Mperc_dist+SDperc_dist)),
                  alpha = 1,
                  position = position_jitterdodge(jitter.width = .1,jitter.height = 0, dodge.width = .1)
                  )+
  geom_abline(intercept = 0, slope = 1, linetype=2) +
  scale_colour_manual(values = c(myViridis[1], myViridis[2])) +
  scale_fill_manual(values = c(myViridis[1], myViridis[2])) +
  geom_line(data = Final.Fixed, aes(x = target_distance, y =10^fit, group=room_condition, color=room_condition))+
  geom_label(x = -0.1, y = 4.75, label = as.character(as.expression(eq1)), 
             hjust = 0, nudge_x =  0, parse = TRUE, size = 4, color = myViridis[2],
             )+
  geom_label(x = -0.1, y = 3.8, label = as.character(as.expression(eq2)), 
             hjust = 0, nudge_x =  0,parse = TRUE, size = 4, 
             color = myViridis[1]
             )+
  scale_x_continuous(name="Distance source (m)", limits = c(0,10)) +
  scale_y_continuous(name="Perceived distance (m)",   limits = c(0,5)) +
  scale_color_manual(labels = c("No Visual Info", "Congruent VE"), values =c(myViridis[2], myViridis[1]))+
  theme_minimal() +
  theme(legend.position = "top",
        legend.title = element_blank(),
        ) 


f1
```

### Logarithmic signed bias (accuracy)

```{r Signed bias LMEM}
#| message: false
#| warning: false
m.logSignedBias <-  lmer(log_bias_m ~target_distance*room_condition+
                           (1+target_distance|subject)+
                           (0+room_condition|subject),
                         data = df.experiment_1)

tab_model(m.logSignedBias, file ="./stats/log_signed_bias_model.html")
```

##### Anova

```{r log signed bias anova}
#| message: false
#| warning: false
Final.FixedlogSB <-effect(c("target_distance*room_condition"), m.logSignedBias)

Final.FixedlogSB<-as.data.frame(Final.FixedlogSB)

logSignedBiasStats <- extract_stats(ggcoefstats(m.logSignedBias))

anovlogSB <- anova(m.logSignedBias)
write_csv(anovlogSB, file ="./stats/log_signed_bias_anova.csv")
knitr::kable(anovlogSB, "html")
```

##### Effect size

```{r log signed bias effect size}
effect_size = eta_squared(anovlogSB)
write_csv(effect_size, file ="./stats/log_signed_bias_effect_size.csv")
knitr::kable(effect_size, "html")
```

```{r log signed bias figure make}
#| echo: true
#| message: false
#| warning: false

tabla.pob_logSB <- df.experiment_1 %>% group_by(target_distance,room_condition) %>%
  summarise(MlogSB  = mean(log_bias_m),
            SDlogSB = sd(log_bias_m)/sqrt(n()))  %>%
  ungroup()

f2 <- ggplot(tabla.pob_logSB, aes(x=target_distance, 
                                  y =(10^MlogSB-1)*100, 
                                  group = room_condition, 
                                  color  = room_condition)) +
  geom_pointrange(aes(x = target_distance, 
                      y =(10^MlogSB-1)*100, 
                      ymin = (10^(MlogSB-SDlogSB)-1)*100, 
                      ymax = (10^(MlogSB+SDlogSB)-1)*100),
                  alpha = 1,
                  position = position_jitterdodge(jitter.width = .1,
                                                  jitter.height = 0,
                                                  dodge.width = .1 ))+
  geom_line(data = Final.FixedlogSB, aes(x = target_distance, 
                                         y =(10^fit-1)*100, 
                                         group=room_condition, 
                                         color=room_condition))+
  scale_x_continuous(name="Distance source (m)", limits = c(0,10)) +
  scale_y_continuous(name="Mean log bias (m)",   limits = c(-100,0)) +
  scale_color_manual(labels = c("NVI", "CVE"), values =c(myViridis[2], myViridis[1]))+
  theme_pubr(base_size = 12, margin = TRUE)+
  theme(legend.position = "top",
        legend.title = element_blank(),)


```
##### Model figure
```{r log signed bias figure view}
f2
```

### Logarithmic signed bias Variability (precision)

```{r log signed bias variability model }
#| message: false
#| warning: false
m.logSignedBiasVar <-  lmer(log_bias_var~target_distance*room_condition
                            +(1+target_distance|subject)
                            +(0+room_condition|subject),
                            data = df.experiment_1)

tab_model(m.logSignedBiasVar, file ="./stats/log_signed_bias_var_model.html")
```

###### Anova

```{r log signed bias variability model anova}
#| message: false
#| warning: false
Final.FixedlogSBVar <-effect(c("target_distance*room_condition"), m.logSignedBiasVar)

Final.FixedlogSBVar<-as.data.frame(Final.FixedlogSBVar)

#logSignedBiasVarStats <- extract_stats(ggcoefstats(m.logSignedBiasVar))

anovlogSBVar <- anova(m.logSignedBiasVar)
write_csv(anovlogSBVar, file = "./stats/log_signed_bias_var_anova.csv")
knitr::kable(anovlogSBVar, "html")

```

###### Effect size

```{r log signed bias var effect size}
effect_size.SBVar = eta_squared(anovlogSBVar)
write_csv(effect_size.SBVar, file ="./stats/log_signed_bias_var_effect_size.csv")
knitr::kable(effect_size.SBVar, "html")
```

```{r log signed bias variability make figure}
#| echo: false
#| message: false
#| warning: false
tabla.pob_logSBVar <- df.experiment_1 %>% group_by(target_distance,room_condition) %>%
  summarise(MlogSBVar  = mean(log_bias_var),
            SDlogSBVar= sd(log_bias_var)/sqrt(n()))  %>%
  ungroup()


f2_var <- ggplot(tabla.pob_logSBVar, aes(x=target_distance, 
                                         y =MlogSBVar, 
                                         group = room_condition, 
                                         color  = room_condition)) +
  geom_pointrange(aes(x = target_distance, 
                      y = MlogSBVar, 
                      ymin = (MlogSBVar-SDlogSBVar), 
                      ymax = (MlogSBVar+SDlogSBVar)),
                  alpha = 1,
                  position = position_jitterdodge(jitter.width = .1,
                                                  jitter.height = 0,
                                                  dodge.width = .1 ))+
  geom_line(data = Final.FixedlogSBVar, aes(x = target_distance, y =fit, group=room_condition, color=room_condition))+
  scale_x_continuous(name="Distance source (m)", limits = c(0,10)) +
  scale_y_continuous(name="Signed log bias var (m)",   limits = c(0,.15)) +
  scale_color_manual(labels = c("NVI", "CVE"), values =c(myViridis[2], myViridis[1]))+
  theme_pubr(base_size = 12, margin = TRUE)+
  theme(legend.position = "top",
        legend.title = element_blank(),)

```

```{r log signed bias variability show figure}
f2_var
```

### Logarithmic unsigned bias (accuracy)

```{r logarithmic unsigned bias model}
#| message: false
#| warning: false
m.logUnsignedBias <-  lmer(log_bias_unsigned_m~target_distance*room_condition
                           +(1+target_distance|subject)
                           +(0+room_condition|subject),
                         data = df.experiment_1)

tab_model(m.logUnsignedBias, file ="./stats/log_unsigned_bias_model.html")
```

##### ANOVA

```{r logarithmic unsigned bias anova}
Final.FixedlogUB <-effect(c("target_distance*room_condition"), m.logUnsignedBias)

Final.FixedlogUB<-as.data.frame(Final.FixedlogUB)

#logUnsignedBiasStats <- extract_stats(ggcoefstats(m.logUnsignedBias))

anovlogUB <- anova(m.logUnsignedBias)
write_csv(anovlogUB, file="./stats/log_unsigned_bias_anova.csv")
knitr::kable(anovlogUB, "html")
```

##### Effect size

```{r logarithmic unsigned bias effect size}
effect_sizeUB = eta_squared(anovlogUB)
write_csv(effect_sizeUB, file="./stats/log_unsigned_bias_effect_size.csv")
knitr::kable(effect_sizeUB, "html")
```

##### Model figure
```{r logarithmic unsigned bias make figure}
#| echo: true
#| message: false
#| warning: false
tabla.pob_logUB <- df.experiment_1 %>% group_by(target_distance,room_condition) %>%
  summarise(MlogUB  = mean(log_bias_unsigned_m),
            SDlogUB = sd(log_bias_unsigned_m)/sqrt(n()))  %>%
  ungroup()

f3 <- ggplot(tabla.pob_logUB, aes(x=target_distance, 
                                  y =(10^MlogUB-1)*100, 
                                  group = room_condition, 
                                  color  = room_condition)) +
  geom_pointrange(aes(x = target_distance, 
                      y =(10^MlogUB-1)*100, 
                      ymin = (10^(MlogUB-SDlogUB)-1)*100, 
                      ymax = (10^(MlogUB+SDlogUB)-1)*100), 
                  alpha = 1,
                  position = position_jitterdodge(jitter.width = .1,
                                                  jitter.height = 0,
                                                  dodge.width = .1 ))+
  geom_line(data = Final.FixedlogUB, aes(x = target_distance, 
                                         y =(10^fit-1)*100, 
                                         group=room_condition, 
                                         color=room_condition))+
  scale_x_continuous(name="Distance source (m)", limits = c(0,10)) +
  scale_y_continuous(name="Mean percentual unsigned log bias (%)",   limits = c(0,300)) +
  scale_color_manual(labels = c("NVI", "CVE"), values =c(myViridis[2], myViridis[1]))+
  theme_pubr(base_size = 12, margin = TRUE)+
  theme(legend.position = "top",
        legend.title = element_blank(),)

```

```{r logarithmic unsigned bias show figure}
f3
```
